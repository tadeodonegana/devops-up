name: Deploy to production workflow

on:
  pull_request:
  push:
    branches: [main]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    env:
      CI: true
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY || 'test_api_key' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests with coverage
        run: |
          python -m pytest --cov=. --cov-report=xml --cov-report=term tests/ -v
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: tadeodonegana/devops-up

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USER }}/tote-backend:latest
            ${{ secrets.DOCKER_USER }}/tote-backend:${{ github.sha }}
          build-args: |
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}

  deploy:
    name: Deploy to Render
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Render with specific version
        env:
          deploy_url: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
          image_tag: docker.io%2Ftadeodonegana%2Ftote-backend%3Acf7cc04f9ea7ea589ffa0ec2b0db888783f97575
        run: |
          curl "${deploy_url}&imgURL=${image_tag}" 